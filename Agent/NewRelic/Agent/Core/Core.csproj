<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0">
    <PropertyGroup>
        <TargetFrameworks>net45;netstandard2.0</TargetFrameworks>
        <AssemblyName>NewRelic.Agent.Core</AssemblyName>
        <RootNamespace>NewRelic.Agent.Core</RootNamespace>
        <Description></Description>
        <SignAssembly>true</SignAssembly>
        <AssemblyOriginatorKeyFile>$(SolutionDir)NewRelicStrongNameKey.snk</AssemblyOriginatorKeyFile>
        <IntermediateOutputPath>$(SolutionDir)\_build\$(Platform)-$(Configuration)\$(AssemblyName)\</IntermediateOutputPath>
        <OutputPath>$(SolutionDir)\_build\$(Platform)-$(Configuration)\$(AssemblyName)\</OutputPath>
    </PropertyGroup>
    <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
        <DebugType>full</DebugType>
        <DebugSymbols>True</DebugSymbols>
    </PropertyGroup>
    <ItemGroup>
        <PackageReference Include="JetBrains.Annotations" Version="10.4.0" />
        <PackageReference Include="MoreLinq" Version="2.4.0" />
        <PackageReference Include="log4net" Version="2.0.8" />
        <PackageReference Include="Newtonsoft.Json" Version="11.0.2" />
    </ItemGroup>
  
  <PropertyGroup>
    <ConfigurationCsPath>Config\Configuration.cs</ConfigurationCsPath>
    <ExtensionCsPath>NewRelic.Agent.Core.Extension\Extension.cs</ExtensionCsPath>
  </PropertyGroup>

  <Target Name="GenerateCodeInner">
    <PropertyGroup>
      <Xsd2CodePath>$(SolutionDir)BuildTools\Xsd2Code.exe</Xsd2CodePath>
    </PropertyGroup>
 
    <Message Importance="high" Text="Running GenerateCodeInner target" />
    <!-- <Exec Command="&quot;$(Xsd2CodePath)&quot; &quot;$(SolutionDir)NewRelic\Agent\Core\Config\Configuration.xsd&quot; NewRelic.Agent.Core.Config Configuration.cs /cl /ap /sc /xa" /> -->
    <!-- <Exec Command="&quot;$(Xsd2CodePath)&quot; &quot;$(SolutionDir)NewRelic\Agent\Core\NewRelic.Agent.Core.Extension\Extension.xsd&quot; NewRelic.Agent.Core.Extension Extension.cs /cl /ap /sc /xa" /> -->
  </Target>

  <Target Name="GenerateCode" BeforeTargets="DispatchToInnerBuilds;CoreCompile">
    <!--
      This is a workaround to help with ensuring that we only generate our code once per build. The TargetFramework=once property
      is just a trick to get the GenerateCodeInner target to run only once, because msbuild will not a execute "task" from same
      project with same properties twice.
      See https://github.com/Microsoft/msbuild/issues/2781 for a good explanation of the problem and the basis of this workaround.
    -->
    <Message Importance="high" Text="Running GenerateCode target" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="GenerateCodeInner" Properties="TargetFramework=once" />
  </Target>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="Autofac" Version="4.5.0" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'net45'">
        <PackageReference Include="Castle.Core" Version="3.3.0" />
        <PackageReference Include="Castle.Windsor" Version="3.3.0" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'net45'">
      <Reference Include="System" />
      <Reference Include="System.Messaging" />
      <Reference Include="System.Web" />
      <Reference Include="System.Data" />
      <Reference Include="System.Xml" />
      <Reference Include="System.Management" />
      <Reference Include="System.Configuration" />
    </ItemGroup>

    <ItemGroup>
        <Reference Include="ICSharpCode.SharpZipLib">
            <HintPath>$(SolutionDir)ExternalLibs\ICSharpCode.SharpZipLib.dll</HintPath>
            <Private>True</Private>
        </Reference>
    </ItemGroup>
    <ItemGroup>
        <ProjectReference Include="..\AttributeFilter\AttributeFilter.csproj" />
        <ProjectReference Include="..\Dongle\Dongle.csproj" />
        <ProjectReference Include="..\Extensions\NewRelic.Agent.Extensions\NewRelic.Agent.Extensions.csproj" />
        <ProjectReference Include="..\LabelsService\LabelsService.csproj" />
        <ProjectReference Include="..\NewRelic.Core\NewRelic.Core.csproj" />
        <ProjectReference Include="..\Parsing\Parsing.csproj" />
    </ItemGroup>
    <ItemGroup>
        <Compile Include="$(SolutionDir)Shared\SharedLog4NetRepository.cs">
            <Link>Properties\SharedLog4NetRepository.cs</Link>
        </Compile>
        <Compile Update="Properties\Resources.Designer.cs">
            <AutoGen>True</AutoGen>
            <DesignTime>True</DesignTime>
            <DependentUpon>Resources.resx</DependentUpon>
        </Compile>

        <!-- The following includes are required because these files are generated by the PreBuildEvent. They do not exist when building from a clean working folder. 
             Since we are using EnableDefaultCompileItems, it seems the list of files to compile is determined prior to the PreBuildEvent. This causes compilation to fail on the
             first build attempt and then succeed on the second build attempt. These includes remedy this issue. -->
        <Compile Include="Config\Configuration.cs" Condition="!Exists('Config\Configuration.cs')" />
        <Compile Include="NewRelic.Agent.Core.Extension\Extension.cs" Condition="!Exists('NewRelic.Agent.Core.Extension\Extension.cs')" />
    </ItemGroup>
    <ItemGroup>
        <None Include="$(SolutionDir)NewRelicStrongNameKey.snk">
            <Link>$(SolutionDir)NewRelicStrongNameKey.snk</Link>
        </None>
    </ItemGroup>
    <ItemGroup>
        <EmbeddedResource Update="Properties\Resources.resx">
            <Generator>ResXFileCodeGenerator</Generator>
            <SubType>Designer</SubType>
        </EmbeddedResource>
    </ItemGroup>
    <Import Project="$(SolutionDir)..\Build\Common.Project.Import.proj" Condition="Exists('$(SolutionDir)..\Build\Common.Project.Import.proj')" />
    <Target Name="PostBuild" AfterTargets="PostBuildEvent">
      <Exec Command="echo $(NuGetPackageFolders) &gt; $(OutDir)NewRelic.Agent.Core.NuGetPackageFolders.txt" />
    </Target>
</Project>
