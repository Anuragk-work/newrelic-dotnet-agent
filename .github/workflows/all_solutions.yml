name: .NET Agent All Solutions Build

# Does not run on PUSH since we have already ran all the test
on:
  workflow_dispatch:

env:
  scripts_path: ${{ github.workspace }}\build\scripts
  tools_path: ${{ github.workspace }}\build\Tools
  DOTNET_NOLOGO: true

jobs:
          
  build-arm64-linux-profiler:
    name: Build ARM64 Linux Profiler
    runs-on: ubuntu-18.04
    
    env:
      profiler_path: ${{ github.workspace }}/src/Agent/NewRelic/Profiler
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Clean out _profilerBuild directory
        run: |
          rm -f ${{ github.workspace }}/src/Agent/_profilerBuild/*.*
          rm -rf ${{ github.workspace }}/src/Agent/_profilerBuild/linux-release
          rm -rf ${{ github.workspace }}/src/Agent/_profilerBuild/x64-Release
          rm -rf ${{ github.workspace }}/src/Agent/_profilerBuild/x86-Release
        shell: bash
        
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update -q -y
            apt-get install -q -y wget curl git dos2unix software-properties-common make binutils libc++-dev clang-3.9 lldb-3.9 build-essential
            echo "deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-3.9 main" | tee /etc/apt/sources.list.d/llvm.list
            wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -
            mkdir /root/git
            cd /root/git
            git clone --branch release/3.0 https://github.com/dotnet/coreclr.git
            curl -sSL https://cmake.org/files/v3.9/cmake-3.9.0-rc3.tar.gz | tar -xzC ~
            cd ~/cmake-3.9.0-rc3
            ./configure
            make install
            rm /usr/bin/cc  || true
            ln -s /usr/bin/clang-3.9 /usr/bin/cc
            rm /usr/bin/c++  || true
            ln -s /usr/bin/clang++-3.9 /usr/bin/c++
          dockerRunArgs: |
            --volume "${{ env.profiler_path }}:/profiler"
          run: |
            cd ${{ env.profiler_path }}
            pwd
            ls -la
            echo Done
            
      - name: Outputtest
        run: |
          echo Output
          cd ${{ env.profiler_path }}
          ls -la
            
